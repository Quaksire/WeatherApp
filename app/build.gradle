apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

apply plugin: 'checkstyle'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'jacoco'

def debugProperties = new Properties()
file("debug.properties").withInputStream { debugProperties.load(it) }

def releaseProperties = new Properties()
file("release.properties").withInputStream { releaseProperties.load(it) }

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.quaksire.weatherapp"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField 'String', 'WEATHER_KEY', debugProperties.getProperty('weather_key')
            buildConfigField 'String', 'WEATHER_URL', debugProperties.getProperty('weather_url')
            buildConfigField 'String', 'WEATHER_ICONS_URL', debugProperties.getProperty('weather_images_url')
        }

        release {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField 'String', 'WEATHER_KEY', releaseProperties.getProperty('weather_key')
            buildConfigField 'String', 'WEATHER_URL', releaseProperties.getProperty('weather_url')
            buildConfigField 'String', 'WEATHER_ICONS_URL', releaseProperties.getProperty('weather_images_url')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation(
            project(':app.network'),
            project(':app.database'),

            // Kotlin
            deps.kotlin.stdlib,
            deps.support.core_ktx,

            // Lifecycle
            deps.lifecycle.runtime,
            deps.lifecycle.extensions,
            deps.lifecycle.viewmodel_ktx,
            'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha02',

            // Support libraries
            deps.support.app_compat,
            deps.support.design,
            deps.support.drawer_layout,
            deps.constraint_layout,

            // Navigation
            deps.navigation.runtime_ktx,
            deps.navigation.fragment_ktx,
            deps.navigation.ui_ktx,

            // Coroutines
            deps.work.runtime_ktx,

            // Dagger
            deps.dagger.runtime,
            deps.dagger.android,
            deps.dagger.android_support,

            // Retrofit
            deps.retrofit.runtime,
            deps.retrofit.gson,
            deps.retrofit.rxAdapter,

            // Other
            deps.retrofit.gson,
            deps.retrofit.rxAdapter,
            deps.room.runtime,
            deps.rxjava2,
            deps.rx_android,
            deps.glide.runtime,
            deps.okio,
            deps.oktttp
    )

    testImplementation (
            deps.junit,
            deps.powermock.runtime,
            deps.powermock.powermockJunit4,
            deps.powermock.powermockJunit4Rule,
            deps.powermock.powermockJunit4RuleAgent,
            deps.mock_web_server
    )

    androidTestImplementation (
            deps.atsl.runner,
            deps.atsl.rules,
            deps.support.app_compat,
            deps.support.recyclerview,
            deps.support.cardview,
            deps.support.design,

            deps.espresso.core,
            deps.espresso.contrib,

            deps.arch_core.testing,
            deps.mockito.core,
            deps.mockito.android,

            deps.mock_web_server
    )

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt deps.dagger.compiler
    kapt deps.dagger.android_support_compiler
    kapt deps.lifecycle.compiler
    kapt deps.room.compiler
    kapt deps.glide.compiler
}

// ===========================
// Jacoco
// ===========================

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// ===========================
// CheckStyle
// ===========================

checkstyle {
    toolVersion '7.8.1'
    configFile file("../checkstyle.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}